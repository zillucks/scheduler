<?php

namespace App\Models;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Adldap\Laravel\Traits\HasLdapUser;

class User extends Authenticatable
{
    use Notifiable, HasLdapUser;

    protected $table = 'users';
    public $incrementing = false;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
	    static::creating(function ($model) {
	    	$model->id = Str::uuid();
	    });
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'username', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    protected $appends = ['current_roles'];

    public function setPasswordAttribute($value)
	{
		$this->attributes['password'] = bcrypt($value);
	}
	
	public function getAuthPassword()
	{
		return $this->password;
    }

    public function getCurrentRolesAttribute()
    {
        return $this->roles()->pluck('role_id')->toArray();
    }

    protected function findByUsername($username)
    {
        return $this->where('username', $username)->first();
    }
    
    public function scopeFilter($query, Request $request) {
        if ($request->has('username') && !empty($request->get('username'))) {
            $search = strtolower($request->get('username'));
            $query->whereRaw('lower(username) like ?', '%'. $search .'%');
        }
        if ($request->has('search') && !empty($request->get('search'))) {
            $search = strtolower($request->get('search'));
            $query->whereHas('identity', function ($identity) use ($search) {
                $identity->whereRaw('lower(full_name) like ?', '%'. $search .'%');
            })
                ->orWhereRaw('lower(username) like ?', '%'. $search .'%');
        }

        return $query;
    }

    public function hasRole($roles)
    {
        if (is_array($roles)) {
            foreach ($roles as $role) {
                $role = trim($role);
                if ($this->checkRole($role)) {
                    return true;
                }
            }
        }
        else {
            return $this->checkRole($roles);
        }
        return false;
    }

    public function isAdmin()
    {
        return $this->roles()->where('slug', 'admin')->first();
    }

    public function checkRole($role)
    {
        return $this->roles()->where('slug', $role)->first() ? true : false;
    }

    public function department()
    {
        return $this->belongsTo('App\Models\Department', 'department_id', 'id');
    }

    public function directorate()
    {
        return $this->belongsTo('App\Models\Directorate', 'directorate_id', 'id');
    }

    public function identity()
    {
        return $this->hasOne('App\Models\Identity', 'user_id', 'id');
    }

    public function organization()
    {
        return $this->belongsTo('App\Models\Organization', 'organization_id', 'id');
    }

    public function site()
    {
        return $this->belongsTo('App\Models\Site', 'site_id', 'id');
    }

    public function unit()
    {
        return $this->belongsTo('App\Models\Unit', 'unit_id', 'id');
    }

    public function roles()
    {
        return $this->belongsToMany('App\Models\Role', 'user_role', 'user_id', 'role_id')->withTimestamps();
    }

}
